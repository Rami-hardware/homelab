---
- name: Deploy Media Docker Services with RAID, SSD Separation, and NVIDIA GPU support
  hosts: media
  become: true

  vars:
    docker_compose_dir: /opt/services
    docker_compose_file: "{{ docker_compose_dir }}/docker-compose.yml"
    docker_daemon_json: /etc/docker/daemon.json

  tasks:

  - name: Install required packages for RAID and Docker setup
    apt:
      name:
      - mdadm
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      state: present
      update_cache: yes

  - name: Wait for apt lock to be released
    shell: |
      while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
        sleep 5
      done
    changed_when: false

  - name: Fix broken dpkg installation
    command: dpkg --configure -a
    register: dpkg_fix
    changed_when: dpkg_fix.rc == 0
    failed_when: dpkg_fix.rc != 0 and dpkg_fix.rc != 1

  - name: Add graphics drivers PPA (for NVIDIA drivers)
    apt_repository:
      repo: ppa:graphics-drivers/ppa
      state: present
      update_cache: yes

  - name: Install NVIDIA driver (latest recommended)
    apt:
      name: nvidia-driver-525
      state: present
      update_cache: yes

  - name: Create RAID 0 with /dev/sdb and /dev/sdc (if not exists)
    command: mdadm --create --verbose /dev/md0 --level=0 --raid-devices=2 /dev/sdb /dev/sdc
    args:
      creates: /dev/md0

  - name: Wait for RAID device
    wait_for:
      path: /dev/md0
      timeout: 30

  - name: Format RAID volume (ext4)
    filesystem:
      fstype: ext4
      dev: /dev/md0

  - name: Create mount point /mnt/media
    file:
      path: /mnt/media
      state: directory

  - name: Mount RAID at /mnt/media
    mount:
      path: /mnt/media
      src: /dev/md0
      fstype: ext4
      opts: defaults
      state: mounted

  - name: Get UUID of /dev/md0
    command: blkid -s UUID -o value /dev/md0
    register: md0_uuid

  - name: Add RAID mount to fstab
    lineinfile:
      path: /etc/fstab
      line: "UUID={{ md0_uuid.stdout }} /mnt/media ext4 defaults 0 0"
      create: yes

  - name: Save mdadm config
    shell: mdadm --detail --scan > /etc/mdadm/mdadm.conf
    notify:
    - Update initramfs

  - name: Create /etc/apt/keyrings directory
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Add Docker GPG key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.asc
      mode: '0644'

  - name: Add Docker repository
    apt_repository:
      repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      state: present
      filename: docker
    notify:
    - Restart Docker

  - name: Update apt cache
    apt:
      update_cache: yes

  - name: Install Docker and dependencies
    apt:
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      state: present

  # NVIDIA Container Toolkit installation steps
  - name: Add NVIDIA Docker GPG key
    apt_key:
      url: https://nvidia.github.io/nvidia-docker/gpgkey
      state: present

  - name: Add NVIDIA Docker repository
    shell: |
      distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
      curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list
    args:
      creates: /etc/apt/sources.list.d/nvidia-docker.list

  - name: Update apt cache after NVIDIA repo added
    apt:
      update_cache: yes

  - name: Install nvidia-docker2 package
    apt:
      name: nvidia-docker2
      state: present

  - name: Configure Docker daemon for NVIDIA runtime
    copy:
      dest: "{{ docker_daemon_json }}"
      content: |
        {
          "default-runtime": "nvidia",
          "runtimes": {
            "nvidia": {
              "path": "nvidia-container-runtime",
              "runtimeArgs": []
            }
          }
        }
    notify:
    - Restart Docker

  - name: Ensure Docker service started and enabled
    service:
      name: docker
      state: started
      enabled: yes

  - name: Create Docker compose directory
    file:
      path: "{{ docker_compose_dir }}"
      state: directory
      mode: '0755'

  - name: Create media directories on RAID mount
    file:
      path: "/mnt/media/{{ item }}"
      state: directory
      mode: '0777'
    loop:
    - movies
    - tv
    - download
    - radarr
    - sonarr
    - bazarr
    - qbittorrent

  - name: Create SSD-based config directories
    file:
      path: "/opt/{{ item }}"
      state: directory
      mode: '0777'
    loop:
    - overseerr
    - plex
    - jellyfin
    - sonarr
    - radarr
    - bazarr
    - qbittorrent
    - prowlarr

  - name: Write Docker Compose file with Jellyfin GPU support
    copy:
      dest: "{{ docker_compose_file }}"
      content: |
        services:

          plex:
            image: plexinc/pms-docker:latest
            container_name: plex
            network_mode: host
            environment:
              - TZ=Europe/London
            volumes:
              - /opt/plex:/config
              - /mnt/media:/data
            restart: unless-stopped

          jellyfin:
            image: jellyfin/jellyfin:latest
            container_name: jellyfin
            ports:
              - "8096:8096"
              - "8920:8920"
            environment:
              - TZ=Europe/London
              - NVIDIA_VISIBLE_DEVICES=all
            deploy:
              resources:
                reservations:
                  devices:
                    - driver: nvidia
                      capabilities: [gpu]
            volumes:
              - /opt/jellyfin:/config
              - /mnt/media:/media
            restart: unless-stopped

          overseerr:
            image: sctx/overseerr:latest
            container_name: overseerr
            ports:
              - "5055:5055"
            environment:
              - TZ=Europe/London
            volumes:
              - /opt/overseerr:/app/config
            restart: unless-stopped

          radarr:
            image: linuxserver/radarr
            container_name: radarr
            ports:
              - "7878:7878"
            environment:
              - PUID=1000
              - PGID=1000
              - TZ=Europe/London
            volumes:
              - /opt/radarr:/config
              - /mnt/media/movies:/movies
              - /mnt/media/download:/downloads
            restart: unless-stopped

          sonarr:
            image: linuxserver/sonarr
            container_name: sonarr
            ports:
              - "8989:8989"
            environment:
              - PUID=1000
              - PGID=1000
              - TZ=Europe/London
            volumes:
              - /opt/sonarr:/config
              - /mnt/media/tv:/tv
              - /mnt/media/download:/downloads
            restart: unless-stopped

          bazarr:
            image: linuxserver/bazarr
            container_name: bazarr
            ports:
              - "6767:6767"
            environment:
              - PUID=1000
              - PGID=1000
              - TZ=Europe/London
            volumes:
              - /opt/bazarr:/config
              - /mnt/media/tv:/tv
              - /mnt/media/movies:/movies
            restart: unless-stopped

          qbittorrent:
            image: linuxserver/qbittorrent
            container_name: qbittorrent
            ports:
              - "8080:8080"
              - "6881:6881"
              - "6881:6881/udp"
            environment:
              - PUID=1000
              - PGID=1000
              - TZ=Europe/London
              - WEBUI_PORT=8080
            volumes:
              - /opt/qbittorrent:/config
              - /mnt/media/download:/downloads
            restart: unless-stopped

          prowlarr:
            image: lscr.io/linuxserver/prowlarr:latest
            container_name: prowlarr
            ports:
              - "9696:9696"
            environment:
              - PUID=1000
              - PGID=1000
              - TZ=Europe/London
            volumes:
              - /opt/prowlarr:/config
            restart: unless-stopped

            
          portainer_agent:
            image: portainer/agent:2.27.9
            container_name: portainer_agent
            ports:
              - "9001:9001"
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - /var/lib/docker/volumes:/var/lib/docker/volumes
              - /:/host
            restart: always

          flaresolverr:
            image: ghcr.io/flaresolverr/flaresolverr:latest
            container_name: flaresolverr
            ports:
              - "8191:8191"
            environment:
              - TZ=Europe/London
              - LOG_LEVEL=info
              - CAPTCHA_SOLVER=none
            restart: unless-stopped

  - name: Start Docker Compose stack
    command: docker compose -f "{{ docker_compose_file }}" up -d --remove-orphans
    args:
      chdir: "{{ docker_compose_dir }}"

  handlers:
  - name: Restart Docker
    systemd:
      name: docker
      state: restarted
      enabled: yes

  - name: Update initramfs
    command: update-initramfs -u
